import Foundation

var valid: [[Character]] = [
    ["5", "3", ".", ".", "7", ".", ".", ".", "."],
    ["6", ".", ".", "1", "9", "5", ".", ".", "."],
    [".", "9", "8", ".", ".", ".", ".", "6", "."],
    ["8", ".", ".", ".", "6", ".", ".", ".", "3"],
    ["4", ".", ".", "8", ".", "3", ".", ".", "1"],
    ["7", ".", ".", ".", "2", ".", ".", ".", "6"],
    [".", "6", ".", ".", ".", ".", "2", "8", "."],
    [".", ".", ".", "4", "1", "9", ".", ".", "5"],
    [".", ".", ".", ".", "8", ".", ".", "7", "9"]
] // -> true

var valid2: [[Character]] = [
    [".", ".", "5", ".", ".", ".", ".", ".", "6"],
    [".", ".", ".", ".", "1", "4", ".", ".", "."],
    [".", ".", ".", ".", ".", ".", ".", ".", "."],
    [".", ".", ".", ".", ".", "9", "2", ".", "."],
    ["5", ".", ".", ".", ".", "2", ".", ".", "."],
    [".", ".", ".", ".", ".", ".", ".", "3", "."],
    [".", ".", ".", "5", "4", ".", ".", ".", "."],
    ["3", ".", ".", ".", ".", ".", "4", "2", "."],
    [".", ".", ".", "2", "7", ".", "6", ".", "."]
] // -> true

var invalid: [[Character]] = [
    ["8", "3", ".", ".", "7", ".", ".", ".", "."],
    ["6", ".", ".", "1", "9", "5", ".", ".", "."],
    [".", "9", "8", ".", ".", ".", ".", "6", "."],
    ["8", ".", ".", ".", "6", ".", ".", ".", "3"],
    ["4", ".", ".", "8", ".", "3", ".", ".", "1"],
    ["7", ".", ".", ".", "2", ".", ".", ".", "6"],
    [".", "6", ".", ".", ".", ".", "2", "8", "."],
    [".", ".", ".", "4", "1", "9", ".", ".", "5"],
    [".", ".", ".", ".", "8", ".", ".", "7", "9"]
] // -> false

var invalid2: [[Character]] = [
    [".", ".", ".", ".", "5", ".", ".", "1", "."],
    [".", "4", ".", "3", ".", ".", ".", ".", "."],
    [".", ".", ".", ".", ".", "3", ".", ".", "1"],
    ["8", ".", ".", ".", ".", ".", ".", "2", "."],
    [".", ".", "2", ".", "7", ".", ".", ".", "."],
    [".", "1", "5", ".", ".", ".", ".", ".", "."],
    [".", ".", ".", ".", ".", "2", ".", ".", "."],
    [".", "2", ".", "9", ".", ".", ".", ".", "."],
    [".", ".", "4", ".", ".", ".", ".", ".", "."]
] // -> false

var empty: [[Character]] = [
    [".", ".", ".", ".", ".", ".", ".", ".", "."],
    [".", ".", ".", ".", ".", ".", ".", ".", "."],
    [".", ".", ".", ".", ".", ".", ".", ".", "."],
    [".", ".", ".", ".", ".", ".", ".", ".", "."],
    [".", ".", ".", ".", ".", ".", ".", ".", "."],
    [".", ".", ".", ".", ".", ".", ".", ".", "."],
    [".", ".", ".", ".", ".", ".", ".", ".", "."],
    [".", ".", ".", ".", ".", ".", ".", ".", "."],
    [".", ".", ".", ".", ".", ".", ".", ".", "."]
] // -> true

func isValidSudoku(_ board: [[Character]]) -> Bool {
    var foundValues = Set<String>()

    for i in 0 ..< 9 {
        for j in 0 ..< 9 {
            let currVal = String(board[i][j])
            if currVal != "." {
                if !foundValues.contains(currVal + " found in row " + String(i)) {
                    foundValues.insert(currVal + " found in row " + String(i))
                } else {
                    return false
                }

                if !foundValues.contains(currVal + " found in col " + String(j)) {
                    foundValues.insert(currVal + " found in col " + String(j))
                } else {
                    return false
                }

                if !foundValues.contains(currVal + " found in box " + String(i / 3) + "-" + String(j / 3)) {
                    foundValues.insert(currVal + " found in box " + String(i / 3) + "-" + String(j / 3))
                } else {
                    return false
                }
            }
        }
    }

    return true
}

isValidSudoku(valid)
isValidSudoku(valid2)
isValidSudoku(invalid)
isValidSudoku(invalid2)
isValidSudoku(empty)
